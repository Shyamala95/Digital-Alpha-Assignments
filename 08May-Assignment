#Question1
def createstack():
    stack=[]
    return stack 
    
#size of the stack
def len(stack):
        return len(stack)
    
#Checking whether the stack is empty 
def isEmpty(stack):
  if(len(stack)==0):
      return True
#push the elements into the stack 
def push(stack,item):
    stack.append(item)
             
#pop the elements into the stack           
def pop(stack,item):
    if isEmpty(stack):
        return stack.pop()
                         
def reverse(string):
    n=len(string)
stack = createstack()
   
for i in range(0,n,1):
    push(stack,string[i]) 
string=""
for i in range(0,n,1):
    string=string+pop(stack)  
    return string         
                    
    
string="Have a nice day"    
print("String before Reverse is ",string) 
t=reverse(string)
print("String After Reverse is ",t)


#Question 3
OPERATORS = set(['+', '-', '^', '*', '/', '(', ')'])
PRIORITY = {'+':1, '-':1, '*':2, '/':2, '^':3}
def infix_to_postfix(formula):
    stack = [] # only pop when the coming op has priority 
    output = ''
    for ch in formula:
        if ch not in OPERATORS:
            output += ch
        elif ch == '(':
            stack.append('(')
        elif ch == ')':
            while stack and stack[-1] != '(':
                output += stack.pop()
            stack.pop() # pop '('
        else:
            while stack and stack[-1] != '(' and PRIORITY[ch] <= PRIORITY[stack[-1]]:
                output += stack.pop()
            stack.append(ch)
   
    while stack: output += stack.pop()
    print (output)
    return output
def evaluate_postfix(formula):
    stack = []
    for ch in formula:
        if ch not in OPERATORS:
            stack.append(float(ch))
        else:
            b = stack.pop()
            a = stack.pop()
            c = {'+':a+b, '-':a-b, '*':a*b, '/':a/b}[ch]
            stack.append(c)
    print (stack[-1])
    return stack[-1]
if __name__ == '__main__':
    infix_to_postfix('a+b*(c^d-e)^(f+g*h)-i')
    
    
#Quene
#Question3

print("Enter the number of processess: ")
n=int(input())
processes=[]
for i in range(0,n):
 processes.insert(i,i+1)


print("\nEnter the burst time of the processes: \n")
bt=list(map(int, input().split()))

#Input Priority 
print("\nEnter the priority of the processes: \n")
priority=list(map(int, input().split()))
tat=[]
wt=[]

#Sorting processes burst time, on the basis of their priority
for i in range(0,len(priority)-1):
 for j in range(0,len(priority)-i-1):
  if(priority[j]>priority[j+1]):
   swap=priority[j]
   priority[j]=priority[j+1]
   priority[j+1]=swap

   swap=bt[j]
   bt[j]=bt[j+1]
   bt[j+1]=swap

   swap=processes[j]
   processes[j]=processes[j+1]
   processes[j+1]=swap

wt.insert(0,0)
tat.insert(0,bt[0])

# waiting time and Turn Around Time 
for i in range(1,len(processes)):
 wt.insert(i,wt[i-1]+bt[i-1])
 tat.insert(i,wt[i]+bt[i])

#calculating average waiting time and average turn around time
avgtat=0
avgwt=0
for i in range(0,len(processes)):
 avgwt=avgwt+wt[i]
 avgtat=avgtat+tat[i]
avgwt=float(avgwt)/n
avgwt=float(avgtat)/n
print("\n")
print("Process\t  Burst Time\t  Waiting Time\t  Turn Around Time")
for i in range(0,n):
 print(str(processes[i])+"\t\t"+str(bt[i])+"\t\t"+str(wt[i])+"\t\t"+str(tat[i]))
 print("\n")
print("Average Waiting time is: "+str(avgwt))
print("Average Turn Around Time is: "+str(avgtat))



